generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                   Int     @id @default(autoincrement())
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float?
  rating               Float?
  stock                Int
  tags                 Json?
  brand                String?
  sku                  String?
  weight               Int?
  warrantyInformation  String?
  shippingInformation  String?
  availabilityStatus   String?
  returnPolicy         String?
  minimumOrderQuantity Int?
  thumbnail            String?
  images               Json?

  width  Float?
  height Float?
  depth  Float?

  barcode String?
  qrCode  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews    Review[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Review {
  id            Int      @id @default(autoincrement())
  rating        Int
  comment       String
  date          DateTime @default(now())
  reviewerName  String
  reviewerEmail String
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String?
  email     String   @unique
  phone     String?  @unique
  password  String?
  address   String?
  age       Int?
  gender    String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts               Cart[]
  orders              Order[]
  PasswordResetTokens PasswordResetToken[]
  reportIssues        ReportIssue[]

  resetToken   String?
  resetExpire  DateTime?
  refreshToken String?
}

model ReportIssue {
  id          Int      @id @default(autoincrement())
  orderId     String
  productName String
  issueType   String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int     @default(1)

  @@unique([cartId, productId])
}

model Order {
  id     Int         @id @default(autoincrement())
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  items  OrderItem[]
  total  Float
  status String      @default("PENDING")

  recipientName  String
  recipientPhone String
  recipientEmail String?
  address        String

  altRecipientName  String?
  altRecipientPhone String?

  deliveryTime String?
  proofImage   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  quantity  Int
  price     Float
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}
