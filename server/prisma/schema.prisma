generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                   Int     @id @default(autoincrement())
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float?
  rating               Float?
  stock                Int
  tags                 Json? // JSON thay cho String[]
  brand                String?
  sku                  String?
  weight               Int?
  warrantyInformation  String?
  shippingInformation  String?
  availabilityStatus   String?
  returnPolicy         String?
  minimumOrderQuantity Int?
  thumbnail            String?
  images               Json? // mảng URL ảnh

  // Gom Dimensions vào Product
  width  Float?
  height Float?
  depth  Float?

  // Gom Meta vào Product
  barcode String?
  qrCode  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Quan hệ
  reviews    Review[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

model Review {
  id            Int      @id @default(autoincrement())
  rating        Int
  comment       String
  date          DateTime @default(now())
  reviewerName  String
  reviewerEmail String
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String?
  email     String   @unique
  phone     String?  @unique
  password  String
  address   String?
  age       Int?
  gender    String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts  Cart[]
  orders Order[]

  resetToken         String?
  resetExpire        DateTime?
  PasswordResetToken PasswordResetToken[]
  reportIssues       ReportIssue[]
  refreshToken       String?
}

model ReportIssue {
  id          Int      @id @default(autoincrement())
  orderId     String
  productName String
  issueType   String // damaged, wrong, missing, other
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())

  // Nếu muốn liên kết với User
  user   User? @relation(fields: [userId], references: [id])
  userId Int
}

model Cart {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int     @default(1)

  @@unique([cartId, productId]) // tránh trùng 1 sp nhiều lần trong giỏ
}

model Order {
  id     Int         @id @default(autoincrement())
  user   User        @relation(fields: [userId], references: [id])
  userId Int
  items  OrderItem[]
  total  Float
  status String      @default("PENDING") // PENDING, PAID, SHIPPED, COMPLETED, CANCELLED

  recipientName  String
  recipientPhone String
  recipientEmail String?
  address        String

  altRecipientName  String?
  altRecipientPhone String?

  deliveryTime String?
  proofImage   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}
